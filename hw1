#Напишіть функціонал “Бібліотеки” яка зберікає книжки.

#Обʼєкт класу “Бібліотека”:
#Атрибути:
#назва
#дата створення (записується автоматично при створенні обʼєкта)
#Може бути створено тільки один бʼєкт класу “Бібліотека” (реалізуйте Singleton).
#Обʼєкт класу “Бібліотека” зберігає в собі тільки обʼєкти класу “Книжка”
#Обʼєкт класу “Бібліотека” має метод для додавання книжки (add_book)
#Обʼєкт класу “Бібліотека” має метод для видалення книжки по точному співпадінню назви (pop_book)
#Обʼєкт класу “Бібліотека” має метод для пошуку книжки/книжок по назві (search_by_name) включаючи часткове співпадіння
#Обʼєкт класу “Бібліотека” має метод для пошуку книжки/книжок по імені автора (search_by_author) включаючи часткове співпадіння
#Обʼєкт класу “Бібліотека” повинен ітеруватись:
#на кожній ітерації повинні вдаватись 10 книжок
#додайте окремий метод, який повертає ітератор книжок в алфавітному порядку по назві (реалізуйте за допомогою генератора)
#Обʼєкт класу “Бібліотеки” повинен репрезентуватися наступним чином - кількість книжок в бібліотеці
#Обʼєкт класу “Книжка”:
#Атрибути:
#назва
#автор
#кількість сторінок
#рік видання
#Створіть бібліотеку, створіть декілька книжок. Додайте книжки в бібліотеку. Виконайте пошук по назві та по автору. Видаліть книжку з бібліотеки. Проітеруйтесь по бібліотеці, проітеруйтесь по бібліотеці в алфавітному порядку.

#* Додайте перевірку вхідних даних для створення книжки за допомогою Pydantic. Додайте перевірку вхідних даних для створення бібліотеки за допомогою Pydantic. https://docs.pydantic.dev/latest/
from datetime import datetime
from pydantic import BaseModel


class BookModel(BaseModel):
    book_name: str
    autor: str
    number_of_page: int
    year_of_publication: int


class Book():
    book_name = None
    autor = None
    number_of_page = None
    year_of_publication = None

    def __init__(self, book_name: str, autor: str, number_of_page: int, year_of_publication: int):
        book_data = BookModel(book_name=book_name, autor=autor, number_of_page=number_of_page, year_of_publication=year_of_publication)
        self.book_name = book_data.book_name
        self.autor = book_data.autor
        self.number_of_page = book_data.number_of_page
        self.year_of_publication = book_data.year_of_publication


class Library:
    instance = None
    library_name = None
    date_of_creation = None
    books = []
    book_partial_name = []
    autor_partial_name = []

    def __new__(cls, library_name):
        if not cls.instance:
            cls.instance = super(Library, cls).__new__(cls)
        return cls.instance

    def __init__(self, library_name: str):
        self.library_name = library_name
        self.date_of_creation = datetime.now()

    def add_book(self, book: str):
        if isinstance(book, Book):
            self.books.append(book)
            return print(f'Book "{book.book_name}" add to library')
        else:
            return print('Add object of Book class')

    def pop_book(self, book_name: str):
        for book in self.books:
            if book_name == book.book_name:
                self.books.remove(book)
                return print(f'{book} have been delite')
            else:
                return print(f'there is no {book} in the library')

    def search_by_name(self, partial_name:int or str):
        if self.books:
            for book in self.books:
                if partial_name.lower() in book.book_name.lower():
                    self.book_partial_name.append(book.book_name)
                    for book in self.book_partial_name:
                        print(f'Maybe you meant this --> "{book}" ?')
                        return self.book_partial_name
                else:
                    return print('No matches')
        else:
            return print('Unfortunately, the library is still empty')

    def search_by_author(self, partial_name: str):
        if self.books:
            for book in self.books:
                if partial_name.lower() in book.autor.lower():
                    self.autor_partial_name.append(book.autor)
                    for autor in self.autor_partial_name:
                        print(f'Maybe you meant this author --> "{autor} ?')
                        return self.autor_partial_name
                else:
                    return print('No matches')
        else:
            return print('Unfortunately, the library is still empty')

    def generator_by_blocks(self, block_size: int):
        for i in range(0, len(self.books), block_size):
            yield self.books[i:i + block_size]

    def iterate_books(self, block_size=10):
        book_blocks = self.generator_by_blocks(block_size)
        for block in book_blocks:
            yield block

    def get_iterator_by_title(self):
        sorted_books = sorted(self.books, key=lambda book: book.book_name.lower())
        for book in sorted_books:
            yield book

    def __repr__(self):
        return f"Number of books in the library-{len(self.books)}"


my_library = Library(library_name='my_library')

book1 = Book(book_name="The Great Gatsby", autor="F. Scott Fitzgerald", number_of_page=180, year_of_publication=1925)
book2 = Book(book_name="To Kill a Mockingbird", autor="Harper Lee", number_of_page=281, year_of_publication=1960)
book3 = Book(book_name="1984", autor="George Orwell", number_of_page=328, year_of_publication=1949)

my_library.add_book(book=book1)
my_library.add_book(book=book2)
my_library.add_book(book=book3)


my_library.search_by_name("Great")
my_library.search_by_author("Scott")


my_library.pop_book("The Great Gatsby")

print("Iterating through the library:")
for block in my_library.iterate_books():
    for book in block:
        print(book)

print("Iterating through the library in alphabetical order:")
for book in my_library.get_iterator_by_title():
    print(book)


